
1. Inicialización del Canvas y Contexto
   
    const canvas = document.getElementById('coloringCanvas');
    const ctx = canvas.getContext('2d');
    const colorPicker = document.getElementById('color');
    
    - Se obtiene el elemento "canvas" y su contexto 2D.
    - Se obtiene el elemento "colorPicker" para seleccionar el color.

2. Evento de Click en el Canvas:
    
    canvas.addEventListener('click', (event) => {
        const x = event.offsetX;
        const y = event.offsetY;
        const fillColor = hexToRgb(colorPicker.value);
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        floodFill(imageData, x, y, fillColor);
        ctx.putImageData(imageData, 0, 0);
    });
   
    - Se añade un evento de click al "canvas".
    - Se obtienen las coordenadas del click (`x` e `y`).
    - Se convierte el color seleccionado a formato RGB.
    - Se obtiene la imagen del canvas.
    - Se llama a la función "floodFill" para rellenar la zona.
    - Se actualiza la imagen del canvas con los nuevos datos.
    

3. Conversión de Hex a RGB:
    
    function hexToRgb(hex) {
        const bigint = parseInt(hex.slice(1), 16);
        const r = (bigint >> 16) & 255;
        const g = (bigint >> 8) & 255;
        const b = bigint & 255;
        return { r, g, b };
    }
    
    - Convierte un color en formato hexadecimal a un objeto RGB.
    Canvas necesita utilizar la converción hexadecimal a RGB para poder manipular los colores, compatibiladad, comparación de colores

4. Algoritmo de Flood Fill:
    
    function floodFill(imageData, x, y, fillColor) {
        const { width, height, data } = imageData;
        const targetColor = getColorAtPixel(data, x, y, width);
        if (colorsMatch(targetColor, fillColor)) return;

        const stack = [{ x, y }];
        while (stack.length) {
            const { x, y } = stack.pop();
            const currentColor = getColorAtPixel(data, x, y, width);
            if (!colorsMatch(currentColor, targetColor)) continue;

            setColorAtPixel(data, x, y, fillColor, width);

            if (x > 0) stack.push({ x: x - 1, y });
            if (x < width - 1) stack.push({ x: x + 1, y });
            if (y > 0) stack.push({ x, y: y - 1 });
            if (y < height - 1) stack.push({ x, y: y + 1 });
        }
    }
    
    - Obtiene el color en las coordenadas iniciales.
    - Si el color es igual al color de relleno, no hace nada.
    - Usa una pila para almacenar las coordenadas a procesar.
    - Cambia el color del píxel actual y añade los píxeles adyacentes a la pila.

5. Funciones Auxiliares:
    - Obtener Color en un Píxel:
        
        function getColorAtPixel(data, x, y, width) {
            const index = (y * width + x) * 4;
            return {
                r: data[index],
                g: data[index + 1],
                b: data[index + 2],
                a: data[index + 3],
            };
        }
        
        - Obtiene el color en las coordenadas `(x, y)`.

    - Establecer Color en un Píxel:
        
        function setColorAtPixel(data, x, y, color, width) {
            const index = (y * width + x) * 4;
            data[index] = color.r;
            data[index + 1] = color.g;
            data[index + 2] = color.b;
            data[index + 3] = 255; 
        }
        
        - Establece el color en las coordenadas `(x, y)`.

    - **Comparar Colores**:
        
        function colorsMatch(color1, color2) {
            return color1.r === color2.r && color1.g === color2.g && color1.b === color2.b && color1.a === color2.a;
        }
        ```
        - Compara dos colores para ver si son iguales.

6. **Cargar Imagen Inicial**:
    
    const img = new Image();
    img.src = '/imagen/flor.png'; 
    img.onload = () => ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
    ```
    - Carga una imagen y la dibuja en el canvas cuando se ha cargado.

